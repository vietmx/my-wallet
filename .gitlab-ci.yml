include:
  - project: "papers/papers-internal/internal"
    file: "/.base-gitlab-ci.yml"

variables:
  TEST_TAG: test_$CI_COMMIT_SHA
  GOOGLE_TAG: eu.gcr.io/papers-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHA
  GOOGLE_TAG_LATEST: eu.gcr.io/papers-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
  GOOGLE_TAG_DEV: eu.gcr.io/papers-dev-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAMESPACE:$CI_COMMIT_SHA
  GOOGLE_TAG_LATEST_DEV: eu.gcr.io/papers-dev-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAMESPACE:latest
  GOOGLE_TAG_ANDROID_CURRENT: eu.gcr.io/papers-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:android-$CI_COMMIT_SHA
  GOOGLE_TAG_ELECTRON_LINUX_CURRENT: eu.gcr.io/papers-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:electron-linux-$CI_COMMIT_SHA
  GOOGLE_TAG_ELECTRON_WINDOWS_CURRENT: eu.gcr.io/papers-kubernetes/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:electron-windows-$CI_COMMIT_SHA

stages:
  - build
  - test
  - qa
  - platform_build
  - publish
  - deploy

build_ionic:
  stage: build
  script:
    - docker build -t $TEST_TAG .

unit:
  allow_failure: true
  stage: test
  script:
    - docker run --name unit-$CI_COMMIT_SHA $TEST_TAG npm run test-ci
    - docker run --name lint-$CI_COMMIT_SHA $TEST_TAG npm run lint-ci
    - docker cp unit-$CI_COMMIT_SHA:/app/src/coverage/report-lcov/lcov.info lcov.info
    - docker cp lint-$CI_COMMIT_SHA:/app/lintReport.json lintReport.json
  after_script:
    - docker rm unit-$CI_COMMIT_SHA
    - docker rm lint-$CI_COMMIT_SHA
  artifacts:
    paths:
      - lcov.info
      - lintReport.json

qa:
  stage: qa
  script:
    - docker create --name qa-$CI_PIPELINE_ID $TEST_TAG npm run sonar-scanner -- -X
      -Dsonar.typescript.lcov.reportPaths=lcov.info
      -Dsonar.typescript.tslint.reportPaths=lintReport.json
      -Dsonar.test.inclusions=**/*.spec.ts
      -Dsonar.tests=src/
      -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts,src/assets/libs/**
      -Dsonar.sources=src/
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.login=$SONAR_LOGIN
      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
      -Dsonar.gitlab.project_id=$CI_PROJECT_ID
      -Dsonar.branch.name=$CI_BUILD_REF_NAME
    - docker cp lcov.info qa-$CI_PIPELINE_ID:/app/lcov.info
    - docker cp lintReport.json qa-$CI_PIPELINE_ID:/app/lintReport.json
    - docker start -a qa-$CI_PIPELINE_ID
  after_script:
    - docker rm -f qa-$CI_PIPELINE_ID || true

build-android:
  stage: platform_build
  when: manual
  variables:
    LOCAL_ANDROID: 'android-$CI_PIPELINE_ID'
  script:
    - sed -i -e "s/versionName \"0.0.0\"/versionName \"$VERSION\"/g" android/app/build.gradle
    - docker build -f build/android/Dockerfile -t $GOOGLE_TAG_ANDROID_CURRENT --build-arg BUILD_NR="$CI_PIPELINE_ID" --build-arg VERSION="$VERSION" .
    - docker run --name $LOCAL_ANDROID $GOOGLE_TAG_ANDROID_CURRENT echo "container ran."
    - docker cp $LOCAL_ANDROID:/app/android-release-unsigned.apk airgap-wallet-release-unsigned-$CI_PIPELINE_ID.apk
    - docker cp $LOCAL_ANDROID:/app/android-debug-aligned.apk airgap-wallet-debug-$CI_PIPELINE_ID.apk
  after_script:
    - docker rm -f $LOCAL_ANDROID || true
  artifacts:
    paths:
      - airgap-wallet-release-unsigned-$CI_PIPELINE_ID.apk
      - airgap-wallet-debug-$CI_PIPELINE_ID.apk

build-ios:
  stage: platform_build
  when: manual
  before_script:
    - echo "$IOS_BUILD_JSON" > build.json
  script:
    - export DEVELOPER_DIR=$XCODE_PATH
    - nvm use 16
    - npm install
    - npm run prepare-prod-build
    - npm run apply-diagnostic-modules # manually remove unused cordova-diagnostic-plugin modules
    - npx ionic build --prod
    - npx cap sync ios
    - xcodebuild -workspace ios/App/App.xcworkspace -scheme "App" -destination generic/platform=iOS -configuration Release archive -archivePath ios/airgap-wallet-$VERSION-$CI_PIPELINE_ID.xcarchive MARKETING_VERSION=$VERSION CURRENT_PROJECT_VERSION=$CI_PIPELINE_ID -allowProvisioningUpdates
  artifacts:
    paths:
      - ios/airgap-wallet-$VERSION-$CI_PIPELINE_ID.xcarchive
  tags:
    - ios

build-mac:
  stage: platform_build
  when: manual
  script:
    - 'sed -i -e "s/\"version\": \"0.0.1\"/\"version\": \"${VERSION}\"/g" electron/package.json'
    - nvm use 16
    - npm install
    - npm run prepare-prod-build
    - npm --prefix electron/ install
    - npm run build:electron:prod
    - npx cap sync electron
    - npm --prefix electron/ run build:mac
  artifacts:
    name: 'electron_macos'
    paths:
      - electron/build/airgap-wallet-$VERSION.dmg
      - electron/build/airgap-wallet-$VERSION.dmg.blockmap
      - electron/build/airgap-wallet-$VERSION-mac.zip
  tags:
    - ios

build-linux:
  stage: platform_build
  when: manual
  variables:
    LOCAL_LINUX: 'linux-$CI_PIPELINE_ID'
  script:
    - docker build -f build/electron/linux/Dockerfile -t $GOOGLE_TAG_ELECTRON_LINUX_CURRENT --build-arg VERSION="$VERSION" .
    - docker run --name $LOCAL_LINUX $GOOGLE_TAG_ELECTRON_LINUX_CURRENT echo "container ran."
    - docker cp $LOCAL_LINUX:/app/electron/build/airgap-wallet-$VERSION.AppImage electron/airgap-wallet-$VERSION.AppImage
  after_script:
    - docker rm -f $LOCAL_LINUX || true
  artifacts:
    name: 'electron_linux'
    paths:
      - electron/airgap-wallet-$VERSION.AppImage

build-windows:
  stage: platform_build
  when: manual
  variables:
    LOCAL_WINDOWS: 'windows-$CI_PIPELINE_ID'
  script:
    - docker build -f build/electron/windows/Dockerfile -t $GOOGLE_TAG_ELECTRON_WINDOWS_CURRENT --build-arg VERSION="$VERSION" .
    - docker run --name $LOCAL_WINDOWS $GOOGLE_TAG_ELECTRON_WINDOWS_CURRENT echo "container ran."
    - docker cp $LOCAL_WINDOWS:/app/electron/build/airgap-wallet-$VERSION.exe electron/airgap-wallet-$VERSION.exe
    - docker cp $LOCAL_WINDOWS:/app/electron/build/airgap-wallet-$VERSION.exe.blockmap electron/airgap-wallet-$VERSION.exe.blockmap
  after_script:
    - docker rm -f $LOCAL_WINDOWS || true
  artifacts:
    name: 'electron_windows'
    paths:
      - electron/airgap-wallet-$VERSION.exe
      - electron/airgap-wallet-$VERSION.exe.blockmap

build-web:
  stage: platform_build
  when: manual
  tags:
    - docker
  script:
    - docker build -f build/web/Dockerfile -t $GOOGLE_TAG -t $GOOGLE_TAG_DEV .

publish-ios:
  stage: publish
  when: manual
  before_script:
    - echo "$IOS_EXPORT_OPTIONS" > exportOptions.plist
  script:
    - export DEVELOPER_DIR=$XCODE_PATH
    - xcodebuild -exportArchive -archivePath ios/airgap-wallet-$VERSION-$CI_PIPELINE_ID.xcarchive -exportOptionsPlist exportOptions.plist -exportPath ios/ -allowProvisioningUpdates
    - xcrun altool --upload-app -f ios/App.ipa -t ios -u $IOS_USERNAME -p $IOS_PASSWORD
  tags:
    - ios

publish-web-dev:
  stage: publish
  extends: .publish-dev
  when: manual
  only:
    - develop
  needs:
    - build-web


publish-web-prod:
  stage: publish
  extends: .publish-prod
  needs:
    - build-web

deploy-web-dev:
  stage: deploy
  extends: .run_dev
  needs:
    - publish-web-dev
  when: manual
  only:
    - develop
  script:
    - find k8s -type f -name \*.yaml -exec sed -i "s|__NAMESPACE__|"$NAMESPACE"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__CI_PROJECT_NAME__|"$CI_PROJECT_NAME"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__TO_BE_REPLACED_BY_IMAGE_TAG__|"$GOOGLE_TAG_DEV"|g" {} +
    - kubectl apply -f k8s/airgap-wallet/common/namespace.yaml
    - kubectl apply -f k8s/airgap-wallet/development/ --recursive
    - kubectl apply -f k8s/airgap-wallet/common/ --recursive

deploy-web-prod:
  stage: deploy
  extends: .run_prod
  needs:
    - publish-web-prod
  when: manual
  script:
    - find k8s -type f -name \*.yaml -exec sed -i "s|__NAMESPACE__|"$NAMESPACE"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__CI_PROJECT_NAME__|"$CI_PROJECT_NAME"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__TO_BE_REPLACED_BY_IMAGE_TAG__|"$GOOGLE_TAG"|g" {} +
    - kubectl apply -f k8s/airgap-wallet/common/namespace.yaml
    - kubectl apply -f k8s/airgap-wallet/production/ --recursive
    - kubectl apply -f k8s/airgap-wallet/common/ --recursive